: >MARK HERE @ 0 , ; : >RESOLVE DUP HERE @ SWAP - SWAP ! ; : <MARK HERE @ ; : <RESOLVE HERE @  -  , ;
: IF POSTPONE 0BRANCH >MARK ; IMMEDIATE : AHEAD POSTPONE BRANCH >MARK ; IMMEDIATE
: ELSE POSTPONE BRANCH >MARK SWAP >RESOLVE ; IMMEDIATE : THEN >RESOLVE ; IMMEDIATE
: BEGIN <MARK ; IMMEDIATE : UNTIL POSTPONE 0BRANCH <RESOLVE ; IMMEDIATE 
: DO <MARK POSTPONE DUP POSTPONE 0BRANCH >MARK POSTPONE 1- POSTPONE >R ; IMMEDIATE
: LOOP POSTPONE R> POSTPONE BRANCH SWAP <RESOLVE >RESOLVE POSTPONE DROP ; IMMEDIATE
: / /MOD SWAP DROP ; : VARIABLE CREATE 0 , ; : SP 32 EMIT ;
VARIABLE CURPROGRAM VARIABLE OFFSET : START CREATE HERE @ CURPROGRAM ! 0 , HERE @ + HERE ! ; 
16 BASE !
: H. 10 /MOD . . ;
: LPREFIX 0A EMIT 64 EMIT 61 EMIT 74 EMIT 20 EMIT 30 EMIT 78 EMIT ;
: SPREFIX 2C EMIT 20 EMIT 30 EMIT 78 EMIT ;
0A BASE !
VARIABLE DUMPCOUNT
: PREFIX DUMPCOUNT @ DUP 1 + DUMPCOUNT ! 8 = IF PREFIX 0 DUMPCOUNT ! ELSE SPREFIX THEN ;
: DUMP ' 8 DUMPCOUNT ! EXECUTE DUP @ SWAP 3 + SWAP 2 /  DO
1 + DUP C@ H. 1 + DUP C@ H. 
LOOP 2DROP ;

: SOP CREATE , DOES> @ 0 0 ;
: AOP CREATE , DOES> @ 1 ;

 0 SOP A     1 SOP B     2 SOP C     3 SOP X     4 SOP Y     5 SOP Z     6 SOP I     7 SOP J
 8 SOP [A]   9 SOP [B]  10 SOP [C]  11 SOP [X]  12 SOP [Y]  13 SOP [Z]  14 SOP [I]  15 SOP [J]
16 AOP [A+] 17 AOP [B+] 18 AOP [C+] 19 AOP [X+] 20 AOP [Y+] 21 AOP [Z+] 22 AOP [I+] 23 AOP [J+]
24 SOP [SP++]           24 SOP [--SP]           25 SOP [SP] 26 AOP [SP+]            27 SOP SP
28 SOP PC   29 SOP EX   30 AOP [OPLIT]          31 AOP OPLIT 

: OC, C, ; : OALIGN ALIGN ;
: HERE@ CURPROGRAM @ DUP @ + 4 + ; : C, HERE@ C! CURPROGRAM @ @ 1 + CURPROGRAM @ ! ; : 2C, DUP 256 / C, C, ;
: CURPROGRAM@ CURPROGRAM @ @ OFFSET @ + 2 / ;
: ALIGN CURPROGRAM @ @ 2 /MOD DROP 1 = IF 0 C, THEN ;
: WRITE2C DUP ROT DUP ROT 256 / SWAP C! 1 + C! ;
: MKLABEL CREATE -1 , 0 , DOES> DUP @ DUP -1 = IF DROP 4 + 2 SWAP ELSE SWAP DROP 1 SWAP .S THEN 31 -ROT ;
: WRITELABEL SWAP .S 1 = IF .S 2C, DROP .S ELSE HERE@ SWAP .S ! 0 2C, DROP THEN ;
: SETLABEL CURPROGRAM @ @ OFFSET @ + 2 / DUP >R ' 4 + DUP ROT SWAP ! 4 + @ DUP 0<> 
  IF R> WRITE2C ELSE R> DROP  THEN ; IMMEDIATE
: PROCESSOP SWAP DUP 1 = IF DROP 
  DUP [ 10 16 BASE ! ] FFFF [ BASE ! ] = IF DROP DROP 32 ELSE DUP 31 < IF 33 + SWAP DROP ELSE 2C, THEN THEN
  1 THEN DUP 2 = IF SWAP HERE@ SWAP ! 0 2C, THEN 0 = IF DROP THEN ;

: 1OP CREATE , DOES> @ HERE@ >R >R 0 0 C, C, PROCESSOP 1024 * R> 32 * + R> SWAP .S WRITE2C ;
: 2OP CREATE , DOES> @ HERE@ >R >R 0 0 C, C, PROCESSOP 1024 * >R PROCESSOP 32 * R> + R> + R> SWAP .S WRITE2C ;

 1 2OP SET  2 2OP ADD   3 2OP SUB   4 2OP MUL   5 2OP MLI   6 2OP DIV   7 2OP DVI   8 2OP MOD   9 2OP MDI
10 2OP AND  11 2OP BOR  12 2OP XOR  13 2OP SHR  14 2OP ASR  15 2OP SHL  16 2OP IFB  17 2OP IFC  18 2OP IFE
19 2OP IFN  20 2OP IFG  21 2OP IFA  22 2OP IFL  23 2OP IFU  26 2OP ADX  27 2OP SBX  30 2OP STI  31 2OP STD
 1 1OP JSR   8 1OP INT   9 1OP IAG  10 1OP IAS  11 1OP RFI  12 1OP IAQ  16 1OP HWN  17 1OP HWQ  18 1OP HWI
19 1OP LOG  20 1OP BRK

: PUSHRSP I OPLIT 1 SUB >R >R >R [I] R> R> R> SET ;
: POPRSP [I] SET I OPLIT 1 ADD ;
VARIABLE LAST
: MCREATE CURPROGRAM @ @ OFFSET @ + 2 / LAST @ 2C, 0 2C,
  OALIGN HERE @ COMPILE-WORDLIST @ >LATEST @ , DUP COMPILE-WORDLIST @ >LATEST ! 0 OC,
  PARSE-WORD DUP 2C, DUP OC, DO DUP C@ DUP OC, 2C, 1+ LOOP ALIGN OALIGN , DUP 2C, LAST ! DOVAR , DROP
  CURPROGRAM @ @ OFFSET @ + 2 / , DOES> @ 2C, ;
: CODEDEF CURPROGRAM @ @ OFFSET @ + 2 / 1 + 2C, ;
: NEXT A [Z] SET Z OPLIT 1 ADD PC [A] SET ;
16 BASE !
4000 START TEST

MKLABEL COLDSTART

SP OPLIT EFFF SET
I OPLIT FFE0 SET
Z COLDSTART SET
NEXT



MCREATE DOVAR
CODEDEF
A OPLIT 1 ADD
[--SP] A SET
NEXT

: VARDEF ['] DOVAR 4 + @ 1 + 2C, ;
: VAR MCREATE VARDEF ;

MCREATE DOCON
CODEDEF
A OPLIT 1 ADD
[--SP] [A] SET
NEXT

: CONST MCREATE ['] DOCON 4 + @ 1 + 2C, ;

CONST DOCOL
Z PUSHRSP
A OPLIT 1 ADD
Z A SET
NEXT

: WORDDEF ['] DOCOL 4 + @ 1 + 2C, ;


VAR STATE 0 2C,
VAR S0 0 2C,
VAR BASE 10 2C,
MKLABEL END
VAR HERE END WRITELABEL
CONST R0 FFFF 2C,
CONST D0 EFFF 2C,
CONST F_HIDDEN 80 2C,
CONST F_IMMEDIATE 20 2C,
CONST F_COMPILE_ONLY 10 2C,

MCREATE !
CODEDEF
A [SP++] SET
[A] [SP++] SET
NEXT

MCREATE @
CODEDEF
A [SP++] SET
[--SP] [A] SET
NEXT

MCREATE LIT
CODEDEF
[--SP] [Z] SET
Z OPLIT 1 ADD
NEXT

MCREATE BRANCH
CODEDEF
Z [Z] SET
NEXT

MCREATE 0BRANCH
CODEDEF
A [SP++] SET
A OPLIT 0 IFE
MKLABEL ZERO
PC ZERO SET
Z OPLIT 1 ADD
NEXT
SETLABEL ZERO
Z [Z] SET
NEXT

MCREATE DUP
CODEDEF
A [SP] SET
[--SP] A SET
NEXT

MCREATE OVER
CODEDEF
A [SP++] SET
B [SP] SET
[--SP] A SET
[--SP] B SET
NEXT

MCREATE ROT
CODEDEF
A [SP++] SET
B [SP++] SET
C [SP++] SET
[--SP] B SET
[--SP] A SET
[--SP] C SET
NEXT

MCREATE DROP
CODEDEF
A [SP++] SET
NEXT

: OSWAP SWAP ;
MCREATE SWAP
CODEDEF
A [SP++] SET
B [SP++] SET
[--SP] A SET
[--SP] B SET
NEXT

MCREATE +
CODEDEF
A [SP++] SET
[SP] A ADD
NEXT

MCREATE -
CODEDEF
A [SP++] SET
[SP] A SUB
NEXT

MCREATE *
CODEDEF
A [SP++] SET
[SP] A MUL
NEXT

MCREATE /
CODEDEF
A [SP++] SET
[SP] A DIV
NEXT

: OMOD MOD ;
MCREATE MOD
CODEDEF
A [SP++] SET
[SP] A OMOD
NEXT

MCREATE >R
CODEDEF
[SP++] PUSHRSP
NEXT

MCREATE R>
CODEDEF
[--SP] POPRSP
NEXT

MCREATE =
CODEDEF
A OPLIT 0 SET
B [SP++] SET
[SP] B IFE
A OPLIT FFFF SET
[SP] A SET
NEXT

MCREATE <>
CODEDEF
A OPLIT 0 SET
B [SP++] SET
[SP] B IFN
A OPLIT FFFF SET
[SP] A SET
NEXT

MCREATE >
CODEDEF
A OPLIT 0 SET
B [SP++] SET
[SP] B IFG
A OPLIT FFFF SET
[SP] A SET
NEXT

MCREATE <
CODEDEF
A OPLIT 0 SET
B [SP++] SET
[SP] B IFL
A OPLIT FFFF SET
[SP] A SET
NEXT

: OHWN HWN ;
MCREATE HWN
CODEDEF
A OHWN
[--SP] A SET
NEXT

: OHWQ HWQ ;
MCREATE HWQ
CODEDEF
A [SP++] SET
A OHWQ
[--SP] X SET
[--SP] Y SET
[--SP] C SET
[--SP] A SET
[--SP] B SET
NEXT

: OHWI HWI ;
MCREATE HWI
CODEDEF
OPLIT 1 IAQ
[OPLIT] F000 I SET
[OPLIT] F001 Z SET
EX [SP++] SET
EX OPLIT 8000 IFB
A [SP++] SET
EX OPLIT 4000 IFB
B [SP++] SET
EX OPLIT 2000 IFB
C [SP++] SET
EX OPLIT 1000 IFB
X [SP++] SET
EX OPLIT 0800 IFB
Y [SP++] SET
EX OPLIT 0400 IFB
Z [SP++] SET
EX OPLIT 0200 IFB
I [SP++] SET
EX OPLIT 0100 IFB
J [SP++] SET
[OPLIT] F002 EX SET
[SP] OHWI
SP OPLIT 1 ADD
EX [OPLIT] F002 SET
EX OPLIT 0080 IFB
[--SP] A SET
EX OPLIT 0040 IFB
[--SP] B SET 
EX OPLIT 0020 IFB
[--SP] C SET
EX OPLIT 0010 IFB
[--SP] X SET
EX OPLIT 0008 IFB
[--SP] Y SET
EX OPLIT 0004 IFB
[--SP] Z SET
EX OPLIT 0002 IFB
[--SP] I SET
EX OPLIT 0001 IFB
[--SP] J SET
I [OPLIT] F000 SET
Z [OPLIT] F001 SET
OPLIT 0 IAQ
NEXT

: >MARK HERE@ 0 2C, ; : >RESOLVE CURPROGRAM@ OSWAP ! ;
: <MARK CURPROGRAM@ ; : <RESOLVE 2C, ;
: IF 0BRANCH >MARK ; : AHEAD BRANCH >MARK ;
: ELSE BRANCH >MARK OSWAP >RESOLVE ; : THEN >RESOLVE ;
: BEGIN <MARK ; : AGAIN BRANCH <RESOLVE ; : UNTIL 0BRANCH <RESOLVE ;
: DO <MARK DUP 0BRANCH >MARK LIT 1 2C, - >R ; : LOOP R> BRANCH OSWAP <RESOLVE >RESOLVE DROP ;


MCREATE EXIT
CODEDEF
Z POPRSP
NEXT

MCREATE TRUE
WORDDEF
LIT FFFF 2C, EXIT

MCREATE FALSE
WORDDEF
LIT 0 2C, EXIT

VAR LINE-WIDTH 20 2C,
VAR EMITPOS 8000 2C,
MCREATE EMIT
WORDDEF
MKLABEL LINERETURN
MKLABEL EMIT-BACKSPACE
DUP LIT 11 2C, <> 0BRANCH LINERETURN WRITELABEL
DUP LIT 10 2C, <> 0BRANCH EMIT-BACKSPACE WRITELABEL
EMITPOS @ DUP LIT 1 2C, + EMITPOS ! SWAP LIT F000 2C, + SWAP !
EXIT
SETLABEL LINERETURN
DROP EMITPOS @ LIT 1 2C, + LINE-WIDTH @ / LINE-WIDTH @ * LIT 20 2C, + EMITPOS ! EXIT
SETLABEL EMIT-BACKSPACE
DROP EMITPOS @ LIT 1 2C, - DUP LIT 0 2C, SWAP ! EMITPOS ! EXIT

VAR #STORE 0 2C,
VAR #TEMP 0 2C, 0 2C, 0 2C, 0 2C, 0 2C, 0 2C, 0 2C, 0 2C,
VAR #LEN 0 2C,

MCREATE <#
WORDDEF
#STORE !
LIT 0 2C,
#LEN !
EXIT

MCREATE #
WORDDEF
#STORE @ BASE @ MOD 
#STORE @ BASE @ / #STORE !
DUP LIT 0A 2C, <
MKLABEL HEX
0BRANCH HEX WRITELABEL
LIT 30 2C, + 
MKLABEL STORE
BRANCH STORE WRITELABEL
SETLABEL HEX
LIT 37 2C, +
SETLABEL STORE
LIT 7 2C, #LEN @ - #TEMP + !
#LEN @ LIT 1 2C, + #LEN !
EXIT

MCREATE #>
WORDDEF
#TEMP LIT 8 2C, #LEN @ - +
#LEN @
EXIT

MCREATE TYPE
WORDDEF
MKLABEL TYPE-DONE
MKLABEL START
SETLABEL START
DUP 0BRANCH TYPE-DONE WRITELABEL
SWAP DUP @ EMIT LIT 1 2C, +
SWAP
LIT 1 2C, -
BRANCH START WRITELABEL
SETLABEL TYPE-DONE
DROP DROP EXIT

MCREATE .
WORDDEF
<# # # # # #> TYPE LIT 20 2C, EMIT
EXIT

CONST INT-TABLE FFE0 2C,

MCREATE E-INT
CODEDEF
OPLIT 0 IAQ
NEXT

MCREATE D-INT
CODEDEF
OPLIT 1 IAQ
NEXT

MCREATE REGISTER-INT
WORDDEF
LIT 1 2C,
MKLABEL SEARCH SETLABEL SEARCH
MKLABEL FOUND
MKLABEL NONE
DUP INT-TABLE + @ 0BRANCH FOUND WRITELABEL
LIT 1 2C, + DUP LIT FFFF 2C, <> 0BRANCH NONE WRITELABEL
BRANCH SEARCH WRITELABEL
SETLABEL FOUND
DUP >R INT-TABLE + ! R> EXIT
SETLABEL NONE
DROP DROP
LIT FFFF 2C, EXIT

MCREATE EXECUTE
CODEDEF
A [SP++] SET
PC [A] SET

: ORFI RFI ;
MCREATE RFI
CODEDEF
Z POPRSP
A ORFI

VAR IN-INT 0 2C,
MCREATE HANDLE-INT-FORTH
MKLABEL HANDLE-INT-FORTH-CODEWORD
SETLABEL HANDLE-INT-FORTH-CODEWORD
WORDDEF
MKLABEL NO-INT
MKLABEL NO-INT2
LIT 1 2C, IN-INT !
DUP LIT 30 2C, < 0BRANCH NO-INT WRITELABEL
INT-TABLE + @ DUP 0BRANCH NO-INT2 WRITELABEL
EXECUTE
LIT 0 2C, IN-INT !
RFI
SETLABEL NO-INT
SETLABEL NO-INT2
DROP
LIT 0 2C, IN-INT !
RFI

MCREATE HANDLE-INT
CODEDEF
[--SP] A SET
A HANDLE-INT-FORTH-CODEWORD SET
PC [A] SET

MCREATE SET-IA
CODEDEF
A [SP++] SET
A IAS
NEXT

MCREATE REGISTER-INT-HANDLER
WORDDEF
LIT HANDLE-INT @ SET-IA
EN-INT
EXIT

MCREATE FIND-DEVICE
WORDDEF
SWAP >R >R
HWN
MKLABEL HARDWARELOOP
SETLABEL HARDWARELOOP
DUP
MKLABEL NOTFOUND
0BRANCH NOTFOUND WRITELABEL
LIT 1 2C, -
DUP HWQ
MKLABEL CONT1 MKLABEL CONT2
R> DUP >R = 0BRANCH CONT1 WRITELABEL
R> R> DUP ROT SWAP >R >R = 0BRANCH CONT2 WRITELABEL
DROP DROP DROP R> R> DROP DROP EXIT
SETLABEL CONT1
DROP
SETLABEL CONT2
DROP DROP DROP
BRANCH HARDWARELOOP WRITELABEL
SETLABEL NOTFOUND
R> R> DROP DROP DROP LIT FFFF 2C, EXIT

VAR KEYBOARDID 0 2C,
VAR KEYBUFFER 0 2C,
VAR KEYBUFFERH 0 2C,
VAR KEYBUFFERT 0 2C,

MCREATE HANDLE-KEYBOARD
WORDDEF
MKLABEL OVERFLOW
MKLABEL KEYBOARD-DONE
MKLABEL KEYBOARD-LOOP
SETLABEL KEYBOARD-LOOP
KEYBOARDID @
LIT 1 2C, LIT 8020 2C, HWI
DUP 0BRANCH KEYBOARD-DONE WRITELABEL
KEYBUFFERH @ LIT 1 2C, + LIT 100 2C, MOD DUP KEYBUFFERT <> 0BRANCH OVERFLOW WRITELABEL
DUP KEYBUFFERH ! KEYBUFFER @ + !
BRANCH KEYBOARD-LOOP WRITELABEL
EXIT
SETLABEL OVERFLOW
DROP DROP
SETLABEL KEYBOARD-DONE
DROP
EXIT

MCREATE KEY?
WORDDEF
KEYBUFFERT @ KEYBUFFERH @ <>
EXIT

MCREATE KEY
WORDDEF
MKLABEL KEYWAIT SETLABEL KEYWAIT
KEY? 0BRANCH KEYWAIT WRITELABEL
KEYBUFFERT @ LIT 1 2C, + LIT 100 2C, MOD DUP KEYBUFFERT !
KEYBUFFER @ + @
EXIT

VAR LINE-BUFFER 0 2C,
VAR LINE-BUFFER-LEN 0 2C,
VAR >IN 0 2C,
VAR SOURCE-ID 0 2C,

MCREATE SETUP-LINEBUFFER
WORDDEF
HERE @ LINE-BUFFER !
HERE @ LIT 100 2C, + HERE !
EXIT

MCREATE ACCEPT
WORDDEF
DUP >R
MKLABEL ACCEPT-LOOP
SETLABEL ACCEPT-LOOP
MKLABEL ACCEPT-DONE
MKLABEL ACCEPT-SKIP1
MKLABEL ACCEPT-SKIP2
SWAP DUP KEY 
DUP LIT 11 2C, <> 0BRANCH ACCEPT-DONE WRITELABEL
MKLABEL ACCEPT-BACKSPACE
DUP LIT 10 2C, <> 0BRANCH ACCEPT-BACKSPACE WRITELABEL
DUP LIT 80 2C, < 0BRANCH ACCEPT-SKIP1 WRITELABEL
DUP LIT 1F 2C, > 0BRANCH ACCEPT-SKIP2 WRITELABEL
DUP EMIT
SWAP ! LIT 1 2C, + SWAP LIT 1 2C, -
BRANCH ACCEPT-LOOP WRITELABEL
SETLABEL ACCEPT-DONE
DROP DROP DROP R> SWAP -
EXIT
SETLABEL ACCEPT-BACKSPACE
EMIT DROP LIT 1 2C, - SWAP LIT 1 2C, +
BRANCH ACCEPT-LOOP WRITELABEL
SETLABEL ACCEPT-SKIP1
SETLABEL ACCEPT-SKIP2
DROP DROP SWAP
BRANCH ACCEPT-LOOP WRITELABEL

MCREATE SETUP-KEYBOARD
WORDDEF
HERE @ KEYBUFFER !
HERE @ LIT 100 2C, + HERE !
LIT 7406 2C,
LIT 30CF 2C,
FIND-DEVICE
KEYBOARDID !
KEYBOARDID @
LIT HANDLE-KEYBOARD REGISTER-INT
LIT 3 2C, LIT C000 2C, HWI
EXIT

MCREATE SETUP-DISPLAY
WORDDEF
LIT F615 2C,
LIT 7349 2C,
FIND-DEVICE
LIT 8000 2C, LIT 0 2C, LIT C000 2C, HWI
EXIT

MCREATE REFILL
WORDDEF
MKLABEL REFILL-ACCEPT
SOURCE-ID @ 0BRANCH REFILL-ACCEPT WRITELABEL
FALSE
EXIT
SETLABEL REFILL-ACCEPT
LINE-BUFFER @ LIT 100 2C, ACCEPT LINE-BUFFER-LEN ! TRUE
LIT 0 2C, >IN !
EXIT

MCREATE PARSE-WORD
WORDDEF
MKLABEL PARSE-LINEBUFFER
SOURCE-ID @ 0BRANCH PARSE-LINEBUFFER WRITELABEL
LIT 0 2C, LIT 0 2C, EXIT
SETLABEL PARSE-LINEBUFFER
LINE-BUFFER @ >IN @ + >IN @
MKLABEL PARSE-EAT SETLABEL PARSE-EAT
MKLABEL PARSE-EAT-DONE MKLABEL PARSE-EAT-EXIT
DUP LINE-BUFFER-LEN @ > 0BRANCH PARSE-EAT-EXIT WRITELABEL
SWAP DUP @ LIT 20 2C, = 0BRANCH PARSE-EAT-DONE WRITELABEL
LIT 1 2C, + SWAP LIT 1 2C, +
BRANCH PARSE-EAT WRITELABEL

SETLABEL PARSE-EAT-EXIT
>IN ! DROP
LIT 0 2C, LIT 0 2C, EXIT
SETLABEL PARSE-EAT-DONE
SWAP DUP >IN !
MKLABEL PARSE-LOOP SETLABEL PARSE-LOOP
MKLABEL PARSE-DONE MKLABEL PARSE-EXIT
DUP LINE-BUFFER-LEN @ > 0BRANCH PARSE-EXIT WRITELABEL
SWAP DUP @ LIT 20 2C, <> 0BRANCH PARSE-DONE WRITELABEL
LIT 1 2C, + SWAP LIT 1 2C, +
BRANCH PARSE-LOOP WRITELABEL
SETLABEL PARSE-DONE
SWAP 
SETLABEL PARSE-EXIT
DUP >IN @ >R >IN ! R> - DUP >R - R> EXIT

SETLABEL COLDSTART
MKLABEL EXIT
REGISTER-INT-HANDLER
SETUP-LINEBUFFER
SETUP-KEYBOARD
SETUP-DISPLAY

BEGIN
REFILL
LINE-BUFFER @ LINE-BUFFER-LEN @ TYPE

AGAIN

SETLABEL END
DUMP TEST
