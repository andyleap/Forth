: >MARK HERE @ 0 , ; : >RESOLVE DUP HERE @ SWAP - SWAP ! ; : <MARK HERE @ ; : <RESOLVE HERE @  -  , ;
: IF POSTPONE 0BRANCH >MARK ; IMMEDIATE : AHEAD POSTPONE BRANCH >MARK ; IMMEDIATE
: ELSE POSTPONE BRANCH >MARK SWAP >RESOLVE ; IMMEDIATE : THEN >RESOLVE ; IMMEDIATE
: BEGIN <MARK ; IMMEDIATE : UNTIL POSTPONE 0BRANCH <RESOLVE ; IMMEDIATE 
: DO <MARK POSTPONE DUP POSTPONE 0BRANCH >MARK POSTPONE 1- POSTPONE >R ; IMMEDIATE
: LOOP POSTPONE R> POSTPONE BRANCH SWAP <RESOLVE >RESOLVE POSTPONE DROP ; IMMEDIATE
: / /MOD SWAP DROP ; : VARIABLE CREATE 0 , ; : SP 32 EMIT ;
VARIABLE CURPROGRAM VARIABLE OFFSET : START CREATE HERE @ CURPROGRAM ! 0 , HERE @ + HERE ! ; 
16 BASE !
: H. 10 /MOD . . ;
: LPREFIX 0A EMIT 64 EMIT 61 EMIT 74 EMIT 20 EMIT 30 EMIT 78 EMIT ;
: SPREFIX 2C EMIT 20 EMIT 30 EMIT 78 EMIT ;
0A BASE !
VARIABLE DUMPCOUNT
: PREFIX DUMPCOUNT @ DUP 1 + DUMPCOUNT ! 8 = IF PREFIX 0 DUMPCOUNT ! ELSE SPREFIX THEN ;
: DUMP ' 8 DUMPCOUNT ! EXECUTE DUP @ SWAP 3 + SWAP 2 /  DO
1 + DUP C@ H. 1 + DUP C@ H. 
LOOP 2DROP ;

: SOP CREATE , DOES> @ 0 0 ;
: AOP CREATE , DOES> @ 1 ;

 0 SOP A     1 SOP B     2 SOP C     3 SOP X     4 SOP Y     5 SOP Z     6 SOP I     7 SOP J
 8 SOP [A]   9 SOP [B]  10 SOP [C]  11 SOP [X]  12 SOP [Y]  13 SOP [Z]  14 SOP [I]  15 SOP [J]
16 AOP [A+] 17 AOP [B+] 18 AOP [C+] 19 AOP [X+] 20 AOP [Y+] 21 AOP [Z+] 22 AOP [I+] 23 AOP [J+]
24 SOP [SP++]           24 SOP [--SP]           25 SOP [SP] 26 AOP [SP+]            27 SOP SP
28 SOP PC   29 SOP EX   30 AOP [OPLIT]          31 AOP OPLIT 

: OC, C, ; : OALIGN ALIGN ;
: HERE@ CURPROGRAM @ DUP @ + 4 + ; : C, HERE@ C! CURPROGRAM @ @ 1 + CURPROGRAM @ ! ; : 2C, DUP 256 / C, C, ;
: CURPROGRAM@ CURPROGRAM @ @ OFFSET @ + 2 / ;
: ALIGN CURPROGRAM @ @ 2 /MOD DROP 1 = IF 0 C, THEN ;
: WRITE2C DUP ROT DUP ROT 256 / SWAP C! 1 + C! ;
: MKLABEL CREATE -1 , 0 , DOES> DUP @ DUP -1 = IF DROP 4 + 2 SWAP ELSE SWAP DROP 1 SWAP .S THEN 31 -ROT ;
: [LABEL] ROT 1 - -ROT ;
: WRITELABEL SWAP .S 1 = IF .S 2C, DROP .S ELSE HERE@ SWAP .S ! 0 2C, DROP THEN ;
: SETLABEL .S CURPROGRAM @ @ OFFSET @ + 2 / DUP >R ' 4 + DUP ROT SWAP ! 4 + @ DUP 0<> 
  IF R> WRITE2C ELSE R> DROP  THEN ; IMMEDIATE
: PROCESSOP SWAP DUP 1 = IF DROP 
  DUP [ 10 16 BASE ! ] FFFF [ BASE ! ] = IF DROP DROP 32 ELSE DUP 31 < IF 33 + SWAP DROP ELSE 2C, THEN THEN
  1 THEN DUP 2 = IF SWAP HERE@ SWAP ! 0 2C, THEN 0 = IF DROP THEN ;

: 1OP CREATE , DOES> @ HERE@ >R >R 0 0 C, C, PROCESSOP 1024 * R> 32 * + R> SWAP .S WRITE2C ;
: 2OP CREATE , DOES> @ HERE@ >R >R 0 0 C, C, PROCESSOP 1024 * >R PROCESSOP 32 * R> + R> + R> SWAP .S WRITE2C ;

 1 2OP SET  2 2OP ADD   3 2OP SUB   4 2OP MUL   5 2OP MLI   6 2OP DIV   7 2OP DVI   8 2OP MOD   9 2OP MDI
10 2OP AND  11 2OP BOR  12 2OP XOR  13 2OP SHR  14 2OP ASR  15 2OP SHL  16 2OP IFB  17 2OP IFC  18 2OP IFE
19 2OP IFN  20 2OP IFG  21 2OP IFA  22 2OP IFL  23 2OP IFU  26 2OP ADX  27 2OP SBX  30 2OP STI  31 2OP STD
 1 1OP JSR   8 1OP INT   9 1OP IAG  10 1OP IAS  11 1OP RFI  12 1OP IAQ  16 1OP HWN  17 1OP HWQ  18 1OP HWI
19 1OP LOG  20 1OP BRK

: ALLOT CURPROGRAM @ @ SWAP 2 * + CURPROGRAM @ ! ;
: PUSHRSP I OPLIT 1 SUB >R >R >R [I] R> R> R> SET ;
: POPRSP [I] SET I OPLIT 1 ADD ;
VARIABLE LAST
: O@ @ ;
: MCREATE CURPROGRAM @ @ OFFSET @ + 2 / LAST @ 2C, 0 2C,
  OALIGN HERE @ COMPILE-WORDLIST @ >LATEST @ , DUP COMPILE-WORDLIST @ >LATEST ! 0 OC,
  PARSE-WORD DUP 2C, DUP OC, DO DUP C@ DUP OC, 2C, 1+ LOOP DROP ALIGN OALIGN , DUP 2C, LAST ! DOVAR ,
  CURPROGRAM @ @ OFFSET @ + 2 / , DOES> @ 2C, ;
: IMMED CURPROGRAM @ LAST @ 2 * + 6 + 32 .S WRITE2C ;
: CODEDEF CURPROGRAM @ @ OFFSET @ + 2 / 1 + 2C, ;
: NEXT A [Z] SET Z OPLIT 1 ADD PC [A] SET ;
16 BASE !
8000 START TEST

MKLABEL COLDSTART

SP OPLIT FEF0 SET
I OPLIT FFF0 SET
Z COLDSTART SET
NEXT



MCREATE DOVAR
CODEDEF
A OPLIT 1 ADD
[--SP] A SET
NEXT

: VARDEF ['] DOVAR 4 + @ 1 + 2C, ;
: VAR MCREATE VARDEF ;

MCREATE DOCON
CODEDEF
A OPLIT 1 ADD
[--SP] [A] SET
NEXT

: CONST MCREATE ['] DOCON 4 + @ 1 + 2C, ;

VAR DOCOL
Z PUSHRSP
A OPLIT 1 ADD
Z A SET
NEXT

: WORDDEF ['] DOCOL 4 + @ 1 + 2C, ;

VAR DODOES
Z PUSHRSP
Z [SP++] SET
A OPLIT 1 ADD
[--SP] A SET
NEXT

VAR STATE 0 2C,
VAR S0 0 2C,
VAR BASE 10 2C,
VAR HEAP FBF0 2C,
MKLABEL END
CONST R0 FFF0 2C,
CONST RH 100 2C,
MKLABEL D0-LABEL
CONST D0 SETLABEL D0-LABEL FEF0 2C,
CONST DH 200 2C,
CONST F_HIDDEN 80 2C,
CONST F_IMMEDIATE 20 2C,
CONST F_COMPILE_ONLY 10 2C,
MKLABEL FORTH-LATEST
MKLABEL LAST-WORD
MKLABEL FORTH-WORDLIST-LABEL
VAR FORTH-WORDLIST SETLABEL FORTH-WORDLIST-LABEL FORTH-LATEST WRITELABEL 
SETLABEL FORTH-LATEST LAST-WORD WRITELABEL
VAR HERE END WRITELABEL

MKLABEL STACKABORT
MKLABEL STACKCHECK
SETLABEL STACKCHECK
SP D0-LABEL [LABEL] IFG
MKLABEL STACKABORT-START
PC STACKABORT-START SET
NEXT
SETLABEL STACKABORT-START
Z STACKABORT SET
SP D0-LABEL [LABEL] SET
NEXT

MCREATE !
CODEDEF
A [SP++] SET
[A] [SP++] SET
PC STACKCHECK SET

: O@ @ ;
MCREATE @
CODEDEF
A [SP++] SET
[--SP] [A] SET
NEXT

MCREATE LIT
CODEDEF
[--SP] [Z] SET
Z OPLIT 1 ADD
NEXT

MCREATE BRANCH
CODEDEF
Z [Z] SET
NEXT

MCREATE 0BRANCH
CODEDEF
A [SP++] SET
A OPLIT 0 IFE
MKLABEL ZERO
PC ZERO SET
Z OPLIT 1 ADD
PC STACKCHECK SET
SETLABEL ZERO
Z [Z] SET
PC STACKCHECK SET

MCREATE DUP
CODEDEF
A [SP] SET
[--SP] A SET
NEXT

MCREATE 2DUP
CODEDEF
A [SP++] SET
B [SP++] SET
[--SP] B SET
[--SP] A SET
[--SP] B SET
[--SP] A SET
NEXT

MCREATE 2OVER
CODEDEF
A [SP++] SET
B [SP++] SET
C [SP++] SET
X [SP++] SET
[--SP] X SET
[--SP] C SET
[--SP] B SET
[--SP] A SET
[--SP] X SET
[--SP] C SET
NEXT

MCREATE 2SWAP
CODEDEF
A [SP++] SET
B [SP++] SET
C [SP++] SET
X [SP++] SET
[--SP] B SET
[--SP] A SET
[--SP] X SET
[--SP] C SET
NEXT

MCREATE TUCK
CODEDEF
A [SP++] SET
B [SP++] SET
[--SP] A SET
[--SP] B SET
[--SP] A SET
NEXT

MCREATE OVER
CODEDEF
A [SP++] SET
B [SP] SET
[--SP] A SET
[--SP] B SET
NEXT

MCREATE ROT
CODEDEF
A [SP++] SET
B [SP++] SET
C [SP++] SET
[--SP] B SET
[--SP] A SET
[--SP] C SET
NEXT

MCREATE DROP
CODEDEF
A [SP++] SET
PC STACKCHECK SET

MCREATE 2DROP
CODEDEF
A [SP++] SET
A [SP++] SET
PC STACKCHECK SET

MCREATE DSP@
CODEDEF
A SP SET
[--SP] A SET
NEXT

MCREATE DSP!
CODEDEF
A [SP++] SET
SP A SET
NEXT

MCREATE RSP@
CODEDEF
[--SP] I SET
NEXT

MCREATE RSP!
CODEDEF
I [SP++] SET
PC STACKCHECK SET

: OSWAP SWAP ;
MCREATE SWAP
CODEDEF
A [SP++] SET
B [SP++] SET
[--SP] A SET
[--SP] B SET
NEXT

: O+ + ;
MCREATE +
CODEDEF
A [SP++] SET
[SP] A ADD
PC STACKCHECK SET

MCREATE -
CODEDEF
A [SP++] SET
[SP] A SUB
PC STACKCHECK SET

MCREATE *
CODEDEF
A [SP++] SET
[SP] A MUL
PC STACKCHECK SET

MCREATE /
CODEDEF
A [SP++] SET
[SP] A DIV
PC STACKCHECK SET

: OMOD MOD ;
MCREATE MOD
CODEDEF
A [SP++] SET
[SP] A OMOD
PC STACKCHECK SET

MCREATE >R
CODEDEF
[SP++] PUSHRSP
PC STACKCHECK SET

MCREATE R>
CODEDEF
[--SP] POPRSP
NEXT

MCREATE 2>R
CODEDEF
A [SP++] SET
[SP++] PUSHRSP
A PUSHRSP
PC STACKCHECK SET

MCREATE 2R>
CODEDEF
A POPRSP
[--SP] POPRSP
[--SP] A SET
NEXT

MCREATE 2R@
CODEDEF
A POPRSP
B POPRSP
[--SP] B SET
[--SP] A SET
B PUSHRSP
A PUSHRSP
NEXT



: OAND AND ;
MCREATE AND
CODEDEF
A [SP++] SET
[SP] A OAND
PC STACKCHECK SET

MCREATE OR
CODEDEF
A [SP++] SET
[SP] A BOR
PC STACKCHECK SET

: OXOR XOR ;
MCREATE XOR
CODEDEF
A [SP++] SET
[SP] A OXOR
PC STACKCHECK SET

MCREATE =
CODEDEF
A OPLIT 0 SET
B [SP++] SET
[SP] B IFE
A OPLIT FFFF SET
[SP] A SET
PC STACKCHECK SET

MCREATE <>
CODEDEF
A OPLIT 0 SET
B [SP++] SET
[SP] B IFN
A OPLIT FFFF SET
[SP] A SET
PC STACKCHECK SET

MCREATE >
CODEDEF
A OPLIT 0 SET
B [SP++] SET
[SP] B IFG
A OPLIT FFFF SET
[SP] A SET
PC STACKCHECK SET

MCREATE <
CODEDEF
A OPLIT 0 SET
B [SP++] SET
[SP] B IFL
A OPLIT FFFF SET
[SP] A SET
PC STACKCHECK SET

: OHWN HWN ;
MCREATE HWN
CODEDEF
A OHWN
[--SP] A SET
NEXT

MKLABEL INT-LEVEL-LABEL
VAR INT-LEVEL SETLABEL INT-LEVEL-LABEL 0 2C,

MCREATE E-INT
CODEDEF
INT-LEVEL-LABEL [LABEL] OPLIT 0 IFN
INT-LEVEL-LABEL [LABEL] OPLIT 1 SUB
INT-LEVEL-LABEL [LABEL] IAQ
NEXT

MCREATE D-INT
CODEDEF
INT-LEVEL-LABEL [LABEL] OPLIT 1 ADD
INT-LEVEL-LABEL [LABEL] IAQ
NEXT

: OHWQ HWQ ;
MCREATE HWQ
CODEDEF
A [SP++] SET
A OHWQ
[--SP] X SET
[--SP] Y SET
[--SP] C SET
[--SP] A SET
[--SP] B SET
NEXT

: OHWI HWI ;
MCREATE HWI
CODEDEF
INT-LEVEL-LABEL [LABEL] OPLIT 1 ADD
INT-LEVEL-LABEL [LABEL] IAQ
[OPLIT] FFFE I SET
[OPLIT] FFFD Z SET
EX [SP++] SET
EX OPLIT 8000 IFB
A [SP++] SET
EX OPLIT 4000 IFB
B [SP++] SET
EX OPLIT 2000 IFB
C [SP++] SET
EX OPLIT 1000 IFB
X [SP++] SET
EX OPLIT 0800 IFB
Y [SP++] SET
EX OPLIT 0400 IFB
Z [SP++] SET
EX OPLIT 0200 IFB
I [SP++] SET
EX OPLIT 0100 IFB
J [SP++] SET
[OPLIT] FFFC EX SET
[SP] OHWI
SP OPLIT 1 ADD
EX [OPLIT] FFFC SET
EX OPLIT 0080 IFB
[--SP] A SET
EX OPLIT 0040 IFB
[--SP] B SET 
EX OPLIT 0020 IFB
[--SP] C SET
EX OPLIT 0010 IFB
[--SP] X SET
EX OPLIT 0008 IFB
[--SP] Y SET
EX OPLIT 0004 IFB
[--SP] Z SET
EX OPLIT 0002 IFB
[--SP] I SET
EX OPLIT 0001 IFB
[--SP] J SET
I [OPLIT] FFFE SET
Z [OPLIT] FFFD SET
INT-LEVEL-LABEL [LABEL] OPLIT 0 IFN
INT-LEVEL-LABEL [LABEL] OPLIT 1 SUB
INT-LEVEL-LABEL [LABEL] IAQ
PC STACKCHECK SET

: >MARK HERE@ 0 2C, ; : >RESOLVE CURPROGRAM@ WRITE2C ;
: <MARK CURPROGRAM@ ; : <RESOLVE 2C, ;
: IF 0BRANCH >MARK ; : AHEAD BRANCH >MARK ;
: ELSE BRANCH >MARK OSWAP >RESOLVE ; : THEN >RESOLVE ;
: BEGIN <MARK ; : AGAIN BRANCH <RESOLVE ; : UNTIL 0BRANCH <RESOLVE ;
: REPEAT BRANCH <RESOLVE >RESOLVE ; : WHILE 0BRANCH >MARK OSWAP ;
: DO <MARK DUP 0BRANCH >MARK LIT 1 2C, - >R ; : LOOP R> BRANCH OSWAP <RESOLVE >RESOLVE DROP ;
: LITERAL LIT 2C, ;
: CASE ;
: OF DUP = 0BRANCH >MARK ;
: ENDOF >RESOLVE ;
: ENDCASE DROP ;
: VARDEF ['] DOVAR 4 + @ 1 + 2C, ;

: OBODY ' 4 O+ O@ 1 O+ ;

VAR WORDLISTS 1 2C,
FORTH-WORDLIST-LABEL WRITELABEL
F ALLOT
VAR CURRENT FORTH-WORDLIST-LABEL WRITELABEL 

MCREATE EXIT
CODEDEF
Z POPRSP
NEXT

MCREATE TRUE
WORDDEF
LIT FFFF 2C, EXIT

MCREATE FALSE
WORDDEF
LIT 0 2C, EXIT

MCREATE MIN
WORDDEF
2DUP < IF DROP ELSE SWAP DROP THEN
EXIT

MCREATE MAX
WORDDEF
2DUP > IF DROP ELSE SWAP DROP THEN
EXIT

VAR SCREEN-WIDTH 20 2C,
VAR SCREEN-HEIGHT 0C 2C,
CONST SCREEN-BASE 0 2C,
VAR EMITPOS 0 2C,

MCREATE MEMCOPY-
CODEDEF
INT-LEVEL-LABEL [LABEL] OPLIT 1 ADD
INT-LEVEL-LABEL [LABEL] IAQ
A [SP++] SET
C J SET
X I SET
J [SP++] SET
I [SP++] SET
MKLABEL COPY-LOOP
SETLABEL COPY-LOOP
[I] [J] STI
A OPLIT 1 SUB
A OPLIT 0 IFN
PC COPY-LOOP SET
I X SET
J C SET
INT-LEVEL-LABEL [LABEL] OPLIT 0 IFN
INT-LEVEL-LABEL [LABEL] OPLIT 1 SUB
INT-LEVEL-LABEL [LABEL] IAQ
NEXT

MCREATE MEMCOPY+
CODEDEF
INT-LEVEL-LABEL [LABEL] OPLIT 1 ADD
INT-LEVEL-LABEL [LABEL] IAQ
A [SP++] SET
C J SET
X I SET
J [SP++] SET
I [SP++] SET
J A ADD
I A ADD
MKLABEL COPY-LOOP
SETLABEL COPY-LOOP
[I] [J] STD
A OPLIT 1 SUB
A OPLIT 0 IFN
PC COPY-LOOP SET
I X SET
J C SET
INT-LEVEL-LABEL [LABEL] OPLIT 0 IFN
INT-LEVEL-LABEL [LABEL] OPLIT 1 SUB
INT-LEVEL-LABEL [LABEL] IAQ
NEXT

MCREATE MEMSET
CODEDEF
INT-LEVEL-LABEL [LABEL] OPLIT 1 ADD
INT-LEVEL-LABEL [LABEL] IAQ
A [SP++] SET
B [SP++] SET
C J SET
X I SET
I [SP++] SET
MKLABEL SET-LOOP
SETLABEL SET-LOOP
[I] B STI
A OPLIT 1 SUB
A OPLIT 0 IFN
PC SET-LOOP SET
I X SET
J C SET
INT-LEVEL-LABEL [LABEL] OPLIT 0 IFN
INT-LEVEL-LABEL [LABEL] OPLIT 1 SUB
INT-LEVEL-LABEL [LABEL] IAQ
NEXT

MCREATE SHIFT
WORDDEF
SCREEN-BASE 
SCREEN-BASE SCREEN-WIDTH @ +
SCREEN-WIDTH @ SCREEN-HEIGHT @ 1 LITERAL - *
MEMCOPY-
SCREEN-BASE SCREEN-WIDTH @ SCREEN-HEIGHT @ 1 LITERAL - * +
0 LITERAL
SCREEN-WIDTH @
MEMSET
EMITPOS @ SCREEN-WIDTH @ - EMITPOS !
EXIT

MCREATE EMIT
WORDDEF
MKLABEL LINERETURN
MKLABEL EMIT-BACKSPACE
EMITPOS @ SCREEN-WIDTH @ SCREEN-HEIGHT @ * 2 LITERAL - > IF
SHIFT
THEN
DUP LIT 0A 2C, <> 0BRANCH LINERETURN WRITELABEL
DUP LIT 08 2C, <> 0BRANCH EMIT-BACKSPACE WRITELABEL
EMITPOS @ DUP LIT 1 2C, + EMITPOS ! SCREEN-BASE + SWAP LIT F000 2C, + SWAP !
EXIT
SETLABEL LINERETURN

DROP EMITPOS @ LIT 1 2C, + 
SCREEN-WIDTH @ / SCREEN-WIDTH @ * LIT 20 2C, + 
EMITPOS ! EXIT

SETLABEL EMIT-BACKSPACE
DROP SCREEN-BASE EMITPOS @ + LIT 1 2C, - LIT 0 2C, SWAP ! EMITPOS @ 1 LITERAL - EMITPOS ! EXIT

VAR #STORE 0 2C,
VAR #TEMP 0 2C, 0 2C, 0 2C, 0 2C, 0 2C, 0 2C, 0 2C, 0 2C,
VAR #LEN 0 2C,

MCREATE <#
WORDDEF
#STORE !
LIT 0 2C,
#LEN !
EXIT

MCREATE #
WORDDEF
#STORE @ BASE @ MOD 
#STORE @ BASE @ / #STORE !
DUP LIT 0A 2C, <
MKLABEL HEX
0BRANCH HEX WRITELABEL
LIT 30 2C, + 
MKLABEL STORE
BRANCH STORE WRITELABEL
SETLABEL HEX
LIT 37 2C, +
SETLABEL STORE
LIT 7 2C, #LEN @ - #TEMP + !
#LEN @ LIT 1 2C, + #LEN !
EXIT

MCREATE #S
WORDDEF
BEGIN
#STORE @ IF
BEGIN
#
#STORE @ 0 LITERAL =
UNTIL
THEN
EXIT

MCREATE #>
WORDDEF
#TEMP LIT 8 2C, #LEN @ - +
#LEN @
EXIT

MCREATE TYPE
WORDDEF
MKLABEL TYPE-DONE
MKLABEL START
SETLABEL START
DUP 0BRANCH TYPE-DONE WRITELABEL
SWAP DUP @ EMIT LIT 1 2C, +
SWAP
LIT 1 2C, -
BRANCH START WRITELABEL
SETLABEL TYPE-DONE
DROP DROP EXIT

MCREATE .
WORDDEF
<# # #S #> TYPE LIT 20 2C, EMIT
EXIT

CONST INT-TABLE 0 2C,

MCREATE REGISTER-INT
WORDDEF
LIT 1 2C,
MKLABEL SEARCH SETLABEL SEARCH
MKLABEL FOUND
MKLABEL NONE
DUP INT-TABLE + @ 0BRANCH FOUND WRITELABEL
LIT 1 2C, + DUP INT-TABLE 20 LITERAL + <> 0BRANCH NONE WRITELABEL
BRANCH SEARCH WRITELABEL
SETLABEL FOUND
DUP >R INT-TABLE + ! R> EXIT
SETLABEL NONE
DROP DROP
LIT FFFF 2C, EXIT

MCREATE EXECUTE
CODEDEF
A [SP++] SET
PC [A] SET

: ORFI RFI ;
MCREATE RFI
CODEDEF
Z POPRSP
SP POPRSP
J [SP++] SET
I [SP++] SET
Z [SP++] SET
Y [SP++] SET
X [SP++] SET
C [SP++] SET
B [SP++] SET
INT-LEVEL-LABEL [LABEL] OPLIT 0 IFN
INT-LEVEL-LABEL [LABEL] OPLIT 1 SUB
A ORFI

VAR IN-INT 0 2C,
MCREATE HANDLE-INT-FORTH
MKLABEL HANDLE-INT-FORTH-CODEWORD
SETLABEL HANDLE-INT-FORTH-CODEWORD
WORDDEF
MKLABEL NO-INT
MKLABEL NO-INT2
LIT 1 2C, IN-INT !
DUP LIT 30 2C, < 0BRANCH NO-INT WRITELABEL
INT-TABLE + @ DUP 0BRANCH NO-INT2 WRITELABEL
EXECUTE
LIT 0 2C, IN-INT !
RFI
SETLABEL NO-INT
SETLABEL NO-INT2
DROP
LIT 0 2C, IN-INT !
RFI

MCREATE HANDLE-INT
CODEDEF
INT-LEVEL-LABEL [LABEL] OPLIT 1 ADD
[--SP] B SET
[--SP] C SET
[--SP] X SET
[--SP] Y SET
[--SP] Z SET
[--SP] I SET
[--SP] J SET
SP PUSHRSP
[--SP] A SET
A HANDLE-INT-FORTH-CODEWORD SET
PC [A] SET

MCREATE SET-IA
CODEDEF
A [SP++] SET
A IAS
NEXT

MCREATE REGISTER-INT-HANDLER
WORDDEF
INT-TABLE 0 LITERAL 20 LITERAL MEMSET
LIT HANDLE-INT @ SET-IA
E-INT
EXIT

MCREATE FIND-DEVICE
WORDDEF
SWAP >R >R
HWN
MKLABEL HARDWARELOOP
SETLABEL HARDWARELOOP
DUP
MKLABEL NOTFOUND
0BRANCH NOTFOUND WRITELABEL
LIT 1 2C, -
DUP HWQ
MKLABEL CONT1 MKLABEL CONT2
R> DUP >R = 0BRANCH CONT1 WRITELABEL
R> R> DUP ROT SWAP >R >R = 0BRANCH CONT2 WRITELABEL
DROP DROP DROP R> R> DROP DROP EXIT
SETLABEL CONT1
DROP
SETLABEL CONT2
DROP DROP DROP
BRANCH HARDWARELOOP WRITELABEL
SETLABEL NOTFOUND
R> R> DROP DROP DROP LIT FFFF 2C, EXIT

VAR KEYBOARDID 0 2C,
CONST KEYBUFFER 0 2C,
VAR KEYBUFFERH 0 2C,
VAR KEYBUFFERT 0 2C,

MCREATE HANDLE-KEYBOARD
WORDDEF
BEGIN
KEYBOARDID @ 1 LITERAL 8020 LITERAL HWI
KEYBOARDID @ 91 LITERAL 2 LITERAL C020 LITERAL HWI
100 LITERAL * +
DUP WHILE
KEYBUFFERH @ 1 LITERAL + 100 LITERAL MOD DUP KEYBUFFERT @ <> IF
DUP KEYBUFFERH ! KEYBUFFER + !
ELSE
DROP
THEN
REPEAT DROP
EXIT

MCREATE KEY?
WORDDEF
KEYBUFFERT @ KEYBUFFERH @ <>
EXIT

MCREATE EKEY
WORDDEF
MKLABEL KEYWAIT SETLABEL KEYWAIT
KEY? 0BRANCH KEYWAIT WRITELABEL
KEYBUFFERT @ LIT 1 2C, + LIT 100 2C, MOD DUP KEYBUFFERT !
KEYBUFFER + @
EXIT

CONST LINE-BUFFER 0 2C,
VAR LINE-BUFFER-LEN 0 2C,
VAR >IN 0 2C,
VAR SOURCE-ID 0 2C,

MCREATE ACCEPT
WORDDEF
DUP >R SWAP DUP >R
BEGIN
DUP EKEY
DUP 11 LITERAL <>
WHILE
DUP 10 LITERAL = IF
DROP R> DUP >R <> IF 08 LITERAL EMIT 1 LITERAL - SWAP 1 LITERAL + SWAP THEN
ELSE
 DUP 80 LITERAL < IF
  DUP 1F LITERAL > IF
   DUP EMIT
   SWAP ! 1 LITERAL + SWAP 1 LITERAL - SWAP
  ELSE
   DROP DROP
  THEN
 ELSE
  DROP DROP
 THEN
 
THEN
REPEAT
DROP DROP DROP R> DROP R> SWAP -
EXIT

MCREATE SETUP-KEYBOARD
WORDDEF
LIT 7406 2C,
LIT 30CF 2C,
FIND-DEVICE DUP
KEYBOARDID !
LIT HANDLE-KEYBOARD REGISTER-INT
LIT 3 2C, LIT C000 2C, HWI
EXIT

VAR DISPLAY 0 2C,

MCREATE SETUP-DISPLAY
WORDDEF
LIT F615 2C,
LIT 7349 2C,
FIND-DEVICE DUP DISPLAY !
SCREEN-BASE LIT 0 2C, LIT C000 2C, HWI
EXIT

MCREATE SET-DISPLAY
WORDDEF
DISPLAY @ SWAP LIT 0 2C, LIT C000 2C, HWI
EXIT

MCREATE RESET-DISPLAY
WORDDEF
SCREEN-BASE SET-DISPLAY
EXIT

MCREATE REFILL
WORDDEF
MKLABEL REFILL-ACCEPT
SOURCE-ID @ 0BRANCH REFILL-ACCEPT WRITELABEL
FALSE
EXIT
SETLABEL REFILL-ACCEPT
LINE-BUFFER LIT 100 2C, ACCEPT LINE-BUFFER-LEN ! TRUE
LIT 0 2C, >IN !
EXIT

VAR SOURCE-POS 0 2C,
VAR SOURCE-LEN 0 2C,

MCREATE SOURCE
WORDDEF
SOURCE-POS @ SOURCE-LEN @ @
EXIT

MCREATE /STRING
WORDDEF
DUP >R - SWAP R> + SWAP
EXIT

MCREATE ISSPACE? 
WORDDEF 
DUP 20 LITERAL = SWAP 0 LITERAL = OR
EXIT
 
MCREATE ISNOTSPACE? 
WORDDEF
20 LITERAL <> 
EXIT

MCREATE XT-SKIP
WORDDEF
>R BEGIN DUP WHILE OVER @ R> DUP >R EXECUTE WHILE 1 LITERAL /STRING REPEAT THEN R> DROP
EXIT

MCREATE M-SKIP
WORDDEF
>R BEGIN DUP WHILE OVER @ R> DUP >R = WHILE 1 LITERAL /STRING REPEAT THEN R> DROP
EXIT

MCREATE NM-SKIP
WORDDEF
>R BEGIN DUP WHILE OVER @ R> DUP >R <> WHILE 1 LITERAL /STRING REPEAT THEN R> DROP
EXIT

MCREATE PARSE-WORD
WORDDEF
SOURCE >IN @ /STRING
LIT ISSPACE? XT-SKIP OVER >R
LIT ISNOTSPACE? XT-SKIP
2DUP 1 LITERAL MIN + SOURCE DROP - >IN !
DROP R> TUCK -
EXIT

MCREATE WORD
WORDDEF
>R SOURCE >IN @ /STRING
0 LITERAL M-SKIP OVER
R> SWAP >R NM-SKIP
2DUP 1 LITERAL MIN + SOURCE DROP - >IN !
DROP R> TUCK -
EXIT

CONST UCASE-BUFFER 0 2C,
MCREATE UCASE
WORDDEF
UCASE-BUFFER SWAP DUP >R DO
 SWAP DUP @
 DUP 60 LITERAL > IF
  DUP 7B LITERAL < IF
   20 LITERAL -
  THEN
 THEN
 ROT DUP ROT SWAP ! 1 LITERAL + SWAP 1 LITERAL + SWAP
LOOP SWAP DROP DROP UCASE-BUFFER R> EXIT

MCREATE LATEST
WORDDEF
CURRENT @ @
EXIT

MCREATE >NAME
WORDDEF
2 LITERAL +
EXIT

MCREATE >XT
WORDDEF
2 LITERAL + DUP @ + 2 LITERAL +
EXIT

: O.S .S ;
MCREATE .S
WORDDEF
DSP@ DUP
D0 <> IF
BEGIN
DUP @ . 1 LITERAL + DUP D0 1 LITERAL - >
UNTIL THEN DROP 0A LITERAL EMIT
EXIT

MCREATE COMPARE
WORDDEF
SWAP >R OVER = IF R> SWAP >R >R >R TRUE R> R> R> DO
2DUP @ SWAP @ <> IF >R >R DROP FALSE R> R> THEN
1 LITERAL + SWAP 1 LITERAL + SWAP
LOOP DROP DROP 
ELSE R> DROP DROP DROP FALSE THEN
EXIT

MCREATE SEARCH-WORDLIST-FORTH
WORDDEF
>R
BEGIN
2DUP R> @ DUP WHILE DUP >R >NAME DUP @ SWAP 1 LITERAL + SWAP COMPARE
UNTIL 1 LITERAL 1 LITERAL R> THEN >R DROP DROP DROP DROP R> DUP 0 LITERAL <> IF 
DUP >XT SWAP
1 LITERAL + @ F_IMMEDIATE AND IF
1 LITERAL
ELSE
FFFF LITERAL
THEN
THEN
EXIT

MCREATE SEARCH-WORDLIST
CODEDEF
INT-LEVEL-LABEL [LABEL] OPLIT 1 ADD
INT-LEVEL-LABEL [LABEL] IAQ
MKLABEL SEARCH-LOOP MKLABEL SEARCH-NOTFOUND MKLABEL SEARCH-COMPARE MKLABEL SEARCH-FOUND
C [SP++] SET
B [SP++] SET
A [SP++] SET
[--SP] I SET
[--SP] J SET
SETLABEL SEARCH-LOOP
C [C] SET
C OPLIT 0 IFE
PC SEARCH-NOTFOUND SET
X C SET
X OPLIT 1 ADD
Y [X] SET
Y OPLIT 80 IFB
PC SEARCH-LOOP SET
X OPLIT 1 ADD
Y [X] SET
X OPLIT 1 ADD
B Y IFN
PC SEARCH-LOOP SET
I A SET
J X SET
SETLABEL SEARCH-COMPARE
[I] [J] IFN
PC SEARCH-LOOP SET
I I STI
Y OPLIT 1 SUB
Y OPLIT 0 IFE
PC SEARCH-FOUND SET
PC SEARCH-COMPARE SET

SETLABEL SEARCH-NOTFOUND
J [SP++] SET
I [SP++] SET
[--SP] OPLIT 0 SET
INT-LEVEL-LABEL [LABEL] OPLIT 0 IFN
INT-LEVEL-LABEL [LABEL] OPLIT 1 SUB
INT-LEVEL-LABEL [LABEL] IAQ
NEXT

SETLABEL SEARCH-FOUND
A J SET
B [A] SET
A OPLIT 1 ADD
B OPLIT 1 ADD
C OPLIT FFFF SET
B [B] SET
B OPLIT 20 IFB
C OPLIT 1 SET
J [SP++] SET
I [SP++] SET
[--SP] A SET
[--SP] C SET
INT-LEVEL-LABEL [LABEL] OPLIT 0 IFN
INT-LEVEL-LABEL [LABEL] OPLIT 1 SUB
INT-LEVEL-LABEL [LABEL] IAQ
NEXT

MCREATE HEAP-ALLOT
WORDDEF
HEAP @ SWAP - DUP HEAP !
EXIT

MCREATE ,
WORDDEF
HERE @ ! HERE @ 1 LITERAL + HERE !
EXIT

MCREATE >CODE
WORDDEF
2 LITERAL + DUP @ + 2 LITERAL +
EXIT

MCREATE HEAD,
WORDDEF
HERE @ LATEST @ , DUP LATEST ! 0 LITERAL , PARSE-WORD UCASE DUP , DO DUP @ , 1 LITERAL + LOOP DROP ,
EXIT

MCREATE CREATE
WORDDEF
HEAD, DOVAR ,
EXIT

MCREATE HIDDEN
WORDDEF
LATEST @ 1 LITERAL + DUP @ F_HIDDEN XOR SWAP !
EXIT

MCREATE :NONAME
WORDDEF
HERE @ DOCOL , 1 LITERAL STATE !
EXIT

MCREATE :
WORDDEF
HEAD, HIDDEN :NONAME DROP
EXIT

MCREATE ;
WORDDEF
LIT EXIT , 
0 LITERAL STATE !
HIDDEN
EXIT
IMMED

MCREATE (DOES>)
WORDDEF
R> LATEST @ >CODE !
EXIT

MCREATE DOES>
WORDDEF
LIT (DOES>) ,
7C20 LITERAL ,
DODOES ,
EXIT
IMMED

MCREATE ?DIGIT
WORDDEF
30 LITERAL - DUP 0A LITERAL > IF 7 LITERAL - DUP 20 LITERAL > IF 20 LITERAL - THEN THEN
BASE @ >
EXIT

MCREATE >DIGIT
WORDDEF
30 LITERAL - DUP 0A LITERAL > IF 7 LITERAL - DUP 20 LITERAL > IF 20 LITERAL - THEN THEN
EXIT

MCREATE >NUMBER
WORDDEF
0 LITERAL >R
BEGIN
 DUP 0 LITERAL >
 WHILE
 SWAP DUP @ DUP ?DIGIT 0 LITERAL = 
 WHILE
 >DIGIT
 R> BASE @ * + >R 1 LITERAL + SWAP 1 LITERAL -
 REPEAT DROP THEN DROP DROP R>
EXIT

MCREATE GET-CURRENT
WORDDEF
CURRENT @
EXIT

MCREATE SET-CURRENT
WORDDEF
CURRENT !
EXIT

MCREATE GET-ORDER
WORDDEF
WORDLISTS DUP @ SWAP OVER + SWAP
DO
DUP @ SWAP
1 LITERAL -
LOOP
DROP
WORDLISTS @
EXIT

MCREATE SET-ORDER
WORDDEF
DUP WORDLISTS ! WORDLISTS SWAP
DO
1 LITERAL + SWAP OVER !
LOOP
DROP
EXIT

MCREATE DEFINITIONS
WORDDEF
GET-ORDER
1 LITERAL -
SWAP SET-CURRENT
SET-ORDER
EXIT

MCREATE WORDLIST
WORDDEF
HERE @ DUP 1 LITERAL + DUP , 1 LITERAL + HERE !
EXIT

MCREATE ALSO
WORDDEF
GET-ORDER
OVER SWAP 1 LITERAL +
SET-ORDER
EXIT

MCREATE ONLY
WORDDEF
FORTH-WORDLIST 1 LITERAL
SET-ORDER
EXIT

MCREATE PREVIOUS
WORDDEF
GET-ORDER
SWAP DROP 1 LITERAL -
SET-ORDER
EXIT

MCREATE FIND
WORDDEF
UCASE WORDLISTS DUP @
DO
>R
2DUP
R> 1 LITERAL + DUP >R @
SEARCH-WORDLIST DUP 0 LITERAL <> IF
R> R> DROP DROP >R >R 2DROP R> R> EXIT
THEN
DROP
R>
LOOP
DROP
2DROP
0 LITERAL
EXIT

MCREATE >MARK
WORDDEF
HERE @ 0 LITERAL ,
EXIT

MCREATE >RESOLVE
WORDDEF
HERE @ SWAP !
EXIT

MCREATE <MARK
WORDDEF
HERE @
EXIT

MCREATE <RESOLVE
WORDDEF
,
EXIT

MCREATE IMMEDIATE
WORDDEF
LATEST @ 1 LITERAL + DUP @ F_IMMEDIATE OR SWAP !
EXIT

: O' POSTPONE ' ;

MCREATE '
WORDDEF
PARSE-WORD FIND DROP
EXIT

MCREATE POSTPONE
WORDDEF
PARSE-WORD FIND DUP IF
    1 LITERAL + IF
      ,
    ELSE
      LIT LIT , , LIT , ,
    THEN
ELSE
    DROP
THEN
EXIT
IMMED

MCREATE TO
WORDDEF
' 1 LITERAL + STATE @ 1 LITERAL = IF
LIT LIT , LIT , , LIT ! ,
ELSE
!
THEN
EXIT
IMMED

VAR CLOCK 0 2C,
VAR CLOCK-TIME 0 2C,

MCREATE TIME
WORDDEF
EMITPOS @
SCREEN-WIDTH @ 5 LITERAL - EMITPOS !
BASE @ 0A LITERAL BASE ! 
CLOCK @ 1 LITERAL 8020 LITERAL HWI 
CLOCK-TIME @ + DUP CLOCK-TIME ! 
DUP 3C LITERAL / <# # # #> TYPE 3A LITERAL EMIT 3C LITERAL MOD <# # # #> TYPE
BASE !
EMITPOS !
EXIT

MCREATE START-CLOCK
WORDDEF
0 LITERAL CLOCK-TIME !
CLOCK @ DUP 0 LITERAL = IF DROP
B402 LITERAL 12D0 LITERAL FIND-DEVICE DUP CLOCK !
THEN
3C LITERAL 0 LITERAL C000 LITERAL HWI
LIT TIME REGISTER-INT >R CLOCK @ R> 2 LITERAL C000 LITERAL HWI
EXIT

VAR FLOPPY 0 2C,
MCREATE GET-FLOPPY
WORDDEF
FLOPPY @ DUP 0 LITERAL = IF
DROP
24C5 LITERAL 4FD5 LITERAL FIND-DEVICE DUP FLOPPY !
THEN
EXIT

MCREATE CHECK-FLOPPY
WORDDEF
GET-FLOPPY
0 LITERAL 8040 LITERAL HWI
EXIT

CONST BLOCK-COUNT 4 2C,
VAR CUR-BLK 0 2C,
VAR BLOCK-LIST FFFF 2C, FFFF 2C, FFFF 2C, FFFF 2C,
VAR BLOCK-UPDATED 0 2C, 0 2C, 0 2C, 0 2C,
CONST BLOCK-BASE 0 2C,

MCREATE FIND-BLOCK
WORDDEF
FFFF LITERAL 4 LITERAL DO DUP FFFF LITERAL = IF 
 OVER R> DUP >R BLOCK-LIST + @ = IF
  DROP R> DUP >R
 THEN
THEN LOOP SWAP DROP 
EXIT

MCREATE SAVE-BLOCK
WORDDEF
DUP FIND-BLOCK DUP FFFF LITERAL <> IF
 DUP >R SWAP >R >R
  BEGIN CHECK-FLOPPY 1 LITERAL = UNTIL
 GET-FLOPPY 
 R> 200 LITERAL * BLOCK-BASE +
 R> 3 LITERAL 9800 LITERAL HWI
  BEGIN CHECK-FLOPPY 1 LITERAL = UNTIL
 0 LITERAL R> BLOCK-UPDATED + !
ELSE
 DROP DROP
THEN
EXIT

MCREATE FREE-BLOCK
WORDDEF
FIND-BLOCK DUP FFFF LITERAL <> IF
 DUP BLOCK-UPDATED + @ IF
  DUP BLOCK-LIST + @ SAVE-BLOCK
 THEN
 BLOCK-LIST + FFFF LITERAL SWAP !
ELSE
 DROP
THEN
EXIT

MCREATE UPDATE
WORDDEF
CUR-BLK @ FIND-BLOCK DUP FFFF LITERAL <> IF 
BLOCK-UPDATED + 1 LITERAL SWAP !
ELSE
DROP
THEN
EXIT

MCREATE BUFFER
WORDDEF
DUP CUR-BLK !
DUP FIND-BLOCK DUP FFFF LITERAL = IF
 DROP
 0 LITERAL 4 LITERAL DO
  R> DUP >R BLOCK-LIST + @ FFFF LITERAL = IF
   DROP R> DUP >R
  THEN
 LOOP
 DUP FREE-BLOCK

THEN

OVER OVER BLOCK-LIST + !
SWAP DROP 200 LITERAL * BLOCK-BASE +
EXIT

MCREATE BLOCK
WORDDEF
DUP CUR-BLK ! DUP >R
BUFFER DUP >R
BEGIN CHECK-FLOPPY 1 LITERAL = OVER 2 LITERAL = OR UNTIL
GET-FLOPPY R> R> 2 LITERAL 9800 LITERAL HWI
BEGIN CHECK-FLOPPY 1 LITERAL = OVER 2 LITERAL = OR UNTIL
EXIT

MCREATE INTERPRET
WORDDEF
BEGIN
PARSE-WORD DUP WHILE 2DUP FIND DUP IF
 >R >R DROP DROP R> R>
 STATE @ IF 
  1 LITERAL = IF
   EXECUTE 
  ELSE 
   ,
  THEN
 ELSE
  DROP
  EXECUTE
 THEN
ELSE
 DROP
 >NUMBER
 STATE @ IF
  LIT LIT , ,  
 THEN
THEN
AGAIN THEN DROP DROP
EXIT

VAR EVAL-SOURCE 0 2C,
VAR EVAL-SOURCE-LEN 0 2C,

MCREATE EVALUATE
WORDDEF
SOURCE-POS @ SOURCE-LEN @ SOURCE-ID @ >IN @ >R >R >R >R
FFFF LITERAL SOURCE-ID !
0 LITERAL >IN !
EVAL-SOURCE-LEN SWAP OVER ! SOURCE-LEN !
SOURCE-POS !
INTERPRET
R> R> R> R> >IN ! SOURCE-ID ! SOURCE-LEN ! SOURCE-POS !
EXIT

MCREATE UNPACK
WORDDEF
DUP 2 LITERAL * >R
DO
 OVER @ DUP >R 100 LITERAL / OVER ! 1 LITERAL + 
 R> 100 LITERAL MOD OVER ! 1 LITERAL +
 SWAP 1 LITERAL + SWAP
LOOP DROP DROP
R>
EXIT

MCREATE PACK
WORDDEF
2 LITERAL / DUP >R
DO
 SWAP DUP @ FF LITERAL AND 100 LITERAL * >R 1 LITERAL + 
 DUP @ FF LITERAL AND >R OVER R> R> OR SWAP ! 
 1 LITERAL + SWAP 1 LITERAL +
LOOP DROP DROP
R>
EXIT

CONST LOAD-BUFFER 0 2C,

MCREATE LOAD
WORDDEF
BLOCK LOAD-BUFFER 200 LITERAL UNPACK LOAD-BUFFER SWAP EVALUATE
EXIT

MCREATE ALLOT
WORDDEF
HERE @ + HERE !
EXIT

MCREATE "
WORDDEF
LIT BRANCH , >MARK >R
22 LITERAL WORD
HERE @ >R SWAP OVER DO DUP @ , 1 LITERAL + LOOP DROP R>
R> >RESOLVE
LIT LIT , ,
LIT LIT , ,
EXIT
IMMED

MCREATE ."
WORDDEF
" LIT TYPE ,
EXIT
IMMED

MCREATE STACK-TRACE
WORDDEF
RSP@ 1 LITERAL + DUP
R0 <> IF
BEGIN
DUP @ 1 LITERAL - @ 1 LITERAL - @ >NAME DUP @ SWAP 1 LITERAL + SWAP TYPE 20 LITERAL EMIT 1 LITERAL + DUP R0 1 LITERAL - >
UNTIL 
THEN 
DROP 0A LITERAL EMIT
EXIT

MCREATE ABORT
WORDDEF
TYPE
0A LITERAL EMIT
STACK-TRACE
MKLABEL QUIT-WORD
QUIT-WORD WRITELABEL

MCREATE ABORT"
WORDDEF
LIT " ,
LIT ABORT ,

MCREATE SETUP-BUFFERS
WORDDEF
190 LITERAL HEAP-ALLOT OBODY SCREEN-BASE LITERAL !
20 LITERAL HEAP-ALLOT OBODY INT-TABLE LITERAL !
100 LITERAL HEAP-ALLOT OBODY KEYBUFFER LITERAL !
100 LITERAL HEAP-ALLOT OBODY LINE-BUFFER LITERAL !
80 LITERAL HEAP-ALLOT OBODY UCASE-BUFFER LITERAL !
800 LITERAL HEAP-ALLOT OBODY BLOCK-BASE LITERAL !
400 LITERAL HEAP-ALLOT OBODY LOAD-BUFFER LITERAL !

LINE-BUFFER SOURCE-POS !
LINE-BUFFER-LEN SOURCE-LEN !
EXIT

MKLABEL STACKWARN
SETLABEL STACKWARN
53 2C, 74 2C, 61 2C, 63 2C, 6B 2C, 20 2C, 55 2C, 6E 2C, 64 2C, 65 2C, 72 2C, 66 2C, 6C 2C, 6F 2C, 77 2C,

SETLABEL STACKABORT
LIT STACKWARN WRITELABEL
0F LITERAL
ABORT

SETLABEL LAST-WORD
MCREATE QUIT
SETLABEL QUIT-WORD
WORDDEF
D0 DSP!
R0 RSP!
BEGIN
STATE @ 0 LITERAL = IF
3E LITERAL EMIT
ELSE
3A LITERAL EMIT
THEN
REFILL DROP
0A LITERAL EMIT
INTERPRET
0A LITERAL EMIT
AGAIN

SETLABEL COLDSTART
MKLABEL EXIT
SETUP-BUFFERS
REGISTER-INT-HANDLER
SETUP-KEYBOARD
SETUP-DISPLAY
QUIT
SETLABEL END
DUMP TEST
